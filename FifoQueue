package queue;

import java.util.*;

public class FifoQueue<E> extends AbstractQueue<E> implements Queue<E> {
	private QueueNode<E> last;
	private int size;

	public FifoQueue() {
		size = 0;
	}

	/**
	 * Returns an iterator over the elements in this queue
	 * 
	 * @return an iterator over the elements in this queue
	 */
	public Iterator<E> iterator() {
		return new QueueIterator();
	}

	/**
	 * Returns the number of elements in this queue
	 * 
	 * @return the number of elements in this queue
	 */
	public int size() {
		return size;
	}

	/**
	 * Inserts the specified element into this queue, if possible post: The
	 * specified element is added to the rear of this queue
	 * 
	 * @param x
	 *            the element to insert
	 * @return true if it was possible to add the element to this queue, else
	 *         false
	 */
	public boolean offer(E x) {
		QueueNode<E> newlast = new QueueNode<E>(x);
		if (size > 0) {
			newlast.next = last.next;
			last.next = newlast;
		} else {
			newlast.next = newlast;
		}
		last = newlast;
		size++;
		return true;
	}

	/**
	 * Retrieves and removes the head of this queue, or null if this queue is
	 * empty. post: the head of the queue is removed if it was not empty
	 * 
	 * @return the head of this queue, or null if the queue is empty
	 */
	public E poll() {
		if (size == 0) {
			return null;
		} else {
			E a = this.peek();
			last.next = last.next.next;
			size--;
			return a;
		}
	}

	/**
	 * Retrieves, but does not remove, the head of this queue, returning null if
	 * this queue is empty
	 * 
	 * @return the head element of this queue, or null if this queue is empty
	 */
	public E peek() {
		if (size == 0) {
			return null;
		} else {
			return last.next.element;
		}
	}

	public void append(FifoQueue<E> q) {
		if (q.size != 0 && this.size != 0) {
			QueueNode<E> qfirst = q.last.next;
			QueueNode<E> qlast = q.last;
			last.next = qfirst;
			qlast.next = last.next;
			this.size += q.size;
			q.last = null;
		} else if (this.size() == 0 && q.size() != 0) {
			QueueNode<E> qlast = q.last;
			last = qlast;
			this.size = q.size;
			q.last = null;
		}
	}

	private static class QueueNode<E> {
		E element;
		QueueNode<E> next;

		private QueueNode(E x) {
			element = x;
			next = null;
		}

	}

	private class QueueIterator implements Iterator<E> {
		QueueNode<E> current;

		public QueueIterator() {
			current = null;
			if (size != 0) {
				current = last.next;
			}
		}

		public boolean hasNext() {
			if (size == 0) {
				return false;
			} else if (current.next == last.next) {
				return false;
			}
			return true;
		}

		public E next() {
			if (size == 0) {
				return null;
			} else {
				E a = current.element;
				current = current.next;
				return a;
			}
		}

		public void remove() {
			throw new UnsupportedOperationException();
		}
	}
}
